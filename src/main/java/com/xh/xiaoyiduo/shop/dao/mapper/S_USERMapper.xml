<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xh.xiaoyiduo.shop.dao.S_USERMapper" >
  <resultMap id="BaseResultMap" type="com.xh.xiaoyiduo.shop.pojo.S_USER" >
    <id column="USER_ID" property="userId" jdbcType="VARCHAR" />
    <result column="STUDENT_NO" property="studentNo" jdbcType="VARCHAR" />
    <result column="NICKNAME" property="nickname" jdbcType="VARCHAR" />
    <result column="PASSWORD" property="password" jdbcType="VARCHAR" />
    <result column="REAL_NAME" property="realName" jdbcType="VARCHAR" />
    <result column="SEX" property="sex" jdbcType="VARCHAR" />
    <result column="EMAIL" property="email" jdbcType="VARCHAR" />
    <result column="PHONE" property="phone" jdbcType="VARCHAR" />
    <result column="DORMITORY_ADDRESS" property="dormitoryAddress" jdbcType="VARCHAR" />
    <result column="CREATE_TIME" property="createTime" jdbcType="DATE" />
  </resultMap>
  <resultMap id="UserRoleMap" type="com.xh.xiaoyiduo.shop.pojo.S_USER" >
    <id column="USER_ID" property="userId" jdbcType="VARCHAR" />
    <result column="NICKNAME" property="nickname" jdbcType="VARCHAR" />
    <collection property="roles" ofType="com.xh.xiaoyiduo.shop.pojo.S_USER_ROLES">
      <id column="ROLE_ID" property="roleId" />
      <result column="ROLE_NAME" property="roleName" />
    </collection>
  </resultMap>
  <!--自定义resultMap-->
  <resultMap id="userMap" type="com.xh.xiaoyiduo.shop.pojo.S_USER">
    <id column="USER_ID" property="userId" />
    <result column="STUDENT_NO" property="studentNo" />
    <result column="NICKNAME" property="nickname" />
    <result column="PASSWORD" property="password" />
    <result column="REAL_NAME" property="realName" />
    <result column="SEX" property="sex" />
    <result column="EMAIL" property="email" />
    <result column="PHONE" property="phone" />
    <result column="DORMITORY_ADDRESS" property="dormitoryAddress" />
    <result column="CREATE_TIME" property="createTime" />
    <result column="USER_BALANCE" property="userBalance" />
    <collection property="roles" ofType="com.xh.xiaoyiduo.shop.pojo.S_USER_ROLES">
      <id column="ROLE_ID" property="roleId"/>
      <result column="ROLE_NAME" property="roleName"/>
      <result column="USER_ID" property="userId"/>
      <collection property="permissions" ofType="com.xh.xiaoyiduo.shop.pojo.S_USER_PERMISSIONS">
        <id column="PERMISSION_ID" property="permissionId"/>
        <result column="PERMISSION_NAME" property="permissionName"/>
        <result column="ROLE_ID" property="roleId"/>
      </collection>
    </collection>
    <collection property="resources" ofType="com.xh.xiaoyiduo.admin.spgl.pojo.RESOURCES">
      <id column="RESOURCE_ID" property="resourceId"/>
      <result column="TYPE" property="type"/>
      <result column="URL" property="url"/>
      <result column="SOURCE_ID" property="sourceId"/>
    </collection>
  </resultMap>
    <!--导出exportMap-->
    <resultMap id="exportMap" type="com.xh.xiaoyiduo.shop.pojo.S_USER">
        <result column="STUDENT_NO" property="studentNo" />
        <result column="NICKNAME" property="nickname" />
        <result column="REAL_NAME" property="realName" />
        <result column="SEX" property="sex" />
        <result column="EMAIL" property="email" />
        <result column="PHONE" property="phone" />
        <result column="DORMITORY_ADDRESS" property="dormitoryAddress" />
        <result column="CREATE_TIME" property="createTime" />
    </resultMap>
  <sql id="Base_Column_List" >
    USER_ID, STUDENT_NO, NICKNAME, PASSWORD, REAL_NAME, SEX, EMAIL, PHONE, DORMITORY_ADDRESS, CREATE_TIME
  </sql>

  <sql id="Export_Column_List" >
    STUDENT_NO, NICKNAME, REAL_NAME, SEX, EMAIL, PHONE, DORMITORY_ADDRESS, CREATE_TIME
  </sql>
  <!--查看用户角色-->
  <select id="seeUserRoles" resultMap="UserRoleMap" parameterType="java.lang.String" >
    select u.user_id, u.nickname, r.role_name
    from S_USER u, S_USER_USERROLES ur, S_USER_ROLES r
    where u.user_id = ur.user_id
    and ur.role_id = r.role_id
    and u.user_id = #{userId,jdbcType=VARCHAR}
  </select>
  <!--根据用户编号查询-->
  <select id="selectByUserId" resultMap="userMap" parameterType="java.lang.String" >
    select u.*, r.*, p.*, rs.* from S_USER u
       left join S_USER_USERROLES ur on u.user_id = ur.user_id
       left join S_USER_ROLES r on r.role_id = ur.role_id
       left join S_USER_ROLEPERMISSIONS rp on rp.role_id = r.role_id
       left join S_USER_PERMISSIONS p on rp.permission_id = p.permission_id
       left join Resources rs on rs.source_id = u.user_id
    where u.USER_ID = #{userId,jdbcType=VARCHAR}
  </select>

  <!--根据手机号查询-->
  <select id="selectByPhone" resultMap="userMap" parameterType="java.lang.String" >
    select u.*, r.*, p.* from S_USER u
       left join S_USER_USERROLES ur on u.user_id = ur.user_id
       left join S_USER_ROLES r on r.role_id = ur.role_id
       left join S_USER_ROLEPERMISSIONS rp on rp.role_id = r.role_id
       left join S_USER_PERMISSIONS p on rp.permission_id = p.permission_id
    where u.PHONE = #{phone,jdbcType=VARCHAR}
  </select>

  <!--根据学号查询-->
  <select id="selectByStudentNo" resultMap="userMap" parameterType="java.lang.String" >
    select u.*, r.*, p.* from S_USER u
       left join S_USER_USERROLES ur on u.user_id = ur.user_id
       left join S_USER_ROLES r on r.role_id = ur.role_id
       left join S_USER_ROLEPERMISSIONS rp on rp.role_id = r.role_id
       left join S_USER_PERMISSIONS p on rp.permission_id = p.permission_id
    where u.STUDENT_NO = #{studentNo,jdbcType=VARCHAR}
  </select>

  <!--根据昵称查询-->
  <select id="selectByNickname" resultMap="userMap" parameterType="java.lang.String" >
    select u.*, r.*, p.* from S_USER u
       left join S_USER_USERROLES ur on u.user_id = ur.user_id
       left join S_USER_ROLES r on r.role_id = ur.role_id
       left join S_USER_ROLEPERMISSIONS rp on rp.role_id = r.role_id
       left join S_USER_PERMISSIONS p on rp.permission_id = p.permission_id
    where u.NICKNAME = #{nickname,jdbcType=VARCHAR}
  </select>

  <!--获取用户总数-->
  <select id="getUserCount" resultType="Integer">
    select sum(1) from S_USER
    <choose>
      <when test="studentNo != null">
        where student_no like concat('%',concat(#{studentNo}, '%'))
        <if test="nickname != null">
          and nickname like concat('%',concat(#{nickname}, '%'))
        </if>
        <if test="realName != null">
          and real_name like concat('%',concat(#{realName}, '%'))
        </if>
      </when>
      <otherwise>
        <choose>
          <when test="nickname != null">
            nickname like concat('%',concat(#{nickname}, '%'))
            <if test="realName != null">
              real_name like concat('%',concat(#{realName}, '%'))
            </if>
          </when>
          <otherwise>
            <if test="realName != null">
              real_name like concat('%',concat(#{realName}, '%'))
            </if>
          </otherwise>
        </choose>
      </otherwise>
    </choose>
  </select>

  <!--获取所有用户-->
  <select id="getAllUsers" resultMap="userMap" parameterType="java.lang.String">
      SELECT *
        FROM (SELECT r.*,ROWNUM rn
          FROM(
            select
              <include refid="Base_Column_List" />
            from S_USER
            <choose>
              <when test="studentNo != null">
                where student_no like concat('%',concat(#{studentNo}, '%'))
                <if test="nickname != null">
                  and nickname like concat('%',concat(#{nickname}, '%'))
                </if>
                <if test="realName != null">
                  and real_name like concat('%',concat(#{realName}, '%'))
                </if>
              </when>
              <otherwise>
                <choose>
                  <when test="nickname != null">
                    nickname like concat('%',concat(#{nickname}, '%'))
                    <if test="realName != null">
                      real_name like concat('%',concat(#{realName}, '%'))
                    </if>
                  </when>
                  <otherwise>
                    <if test="realName != null">
                      real_name like concat('%',concat(#{realName}, '%'))
                    </if>
                  </otherwise>
                </choose>
              </otherwise>
            </choose>
            order by create_time desc
        ) r
         where ROWNUM &lt;= #{pageSize} * #{currentPage}
      ) WHERE rn > #{pageSize} * ( #{currentPage} - 1)
  </select>

  <!--模糊查询用户-->
  <select id="fuzzyQueryUsers" resultMap="userMap" parameterType="java.lang.String">
    SELECT *
      FROM (SELECT r.*,ROWNUM rn
        FROM(
          select
            <include refid="Base_Column_List" />
          from S_USER
            <choose>
              <when test="studentNo != null">
                where student_no like concat('%',concat(#{studentNo}, '%'))
                <if test="nickname != null">
                    and nickname like concat('%',concat(#{nickname}, '%'))
                </if>
                <if test="realName != null">
                    and real_name like concat('%',concat(#{realName}, '%'))
                </if>
              </when>
              <otherwise>
                <choose>
                  <when test="nickname != null">
                    nickname like concat('%',concat(#{nickname}, '%'))
                    <if test="realName != null">
                      real_name like concat('%',concat(#{realName}, '%'))
                    </if>
                  </when>
                  <otherwise>
                    <if test="realName != null">
                      real_name like concat('%',concat(#{realName}, '%'))
                    </if>
                  </otherwise>
                </choose>
              </otherwise>
            </choose>
            order by create_time desc
        ) r
      where ROWNUM &lt;= #{pageSize} * #{currentPage}
    ) WHERE rn > #{pageSize} * ( #{currentPage} - 1)
  </select>

  <!--导出用户数据-->
  <select id="exportUserExcel" resultMap="exportMap" parameterType="java.lang.String">
    select
    <include refid="Export_Column_List" />
    from S_USER
    order by create_time desc
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from S_USER
    where USER_ID = #{userId,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.xh.xiaoyiduo.shop.pojo.S_USER" >
    insert into S_USER (USER_ID, STUDENT_NO, NICKNAME, 
      PASSWORD, REAL_NAME, SEX, 
      EMAIL, PHONE, DORMITORY_ADDRESS, CREATE_TIME
      )
    values (#{userId,jdbcType=VARCHAR}, #{studentNo,jdbcType=VARCHAR}, #{nickname,jdbcType=VARCHAR}, 
      #{password,jdbcType=VARCHAR}, #{realName,jdbcType=VARCHAR}, #{sex,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{dormitoryAddress,jdbcType=VARCHAR},
      <!--#{createTime,jdbcType=DATE}-->
      sysdate
      )
  </insert>
  <insert id="insertSelective" parameterType="com.xh.xiaoyiduo.shop.pojo.S_USER" >
    insert into S_USER
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        USER_ID,
      </if>
      <if test="studentNo != null" >
        STUDENT_NO,
      </if>
      <if test="nickname != null" >
        NICKNAME,
      </if>
      <if test="password != null" >
        PASSWORD,
      </if>
      <if test="realName != null" >
        REAL_NAME,
      </if>
      <if test="sex != null" >
        SEX,
      </if>
      <if test="email != null" >
        EMAIL,
      </if>
      <if test="phone != null" >
        PHONE,
      </if>
      <if test="dormitoryAddress != null" >
        DORMITORY_ADDRESS,
      </if>
      <if test="createTime != null" >
        CREATE_TIME
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="studentNo != null" >
        #{studentNo,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null" >
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="realName != null" >
        #{realName,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="dormitoryAddress != null" >
        #{dormitoryAddress,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null " >
        #{createTime,jdbcType=DATE}
      </if>
    </trim>
  </insert>

  <!--更新用户信息-->
  <update id="updateUserInfoByUserId" parameterType="com.xh.xiaoyiduo.shop.pojo.S_USER" >
    update S_USER
    <set >
      <if test="studentNo != null" >
        STUDENT_NO = #{studentNo,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null" >
        NICKNAME = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        PASSWORD = #{password,jdbcType=VARCHAR},
      </if>
      <if test="realName != null" >
        REAL_NAME = #{realName,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        SEX = #{sex,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        EMAIL = #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        PHONE = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="dormitoryAddress != null" >
        DORMITORY_ADDRESS = #{dormitoryAddress,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null " >
        CREATE_TIME = #{createTime,jdbcType=DATE},
      </if>
      <if test="userBalance != null " >
        USER_BALANCE = #{userBalance,jdbcType=DATE}
      </if>
    </set>
    where USER_ID = #{userId,jdbcType=VARCHAR}
  </update>

  <update id="updateByPrimaryKey" parameterType="com.xh.xiaoyiduo.shop.pojo.S_USER" >
    update S_USER
    set STUDENT_NO = #{studentNo,jdbcType=VARCHAR},
      NICKNAME = #{nickname,jdbcType=VARCHAR},
      PASSWORD = #{password,jdbcType=VARCHAR},
      REAL_NAME = #{realName,jdbcType=VARCHAR},
      SEX = #{sex,jdbcType=VARCHAR},
      EMAIL = #{email,jdbcType=VARCHAR},
      PHONE = #{phone,jdbcType=VARCHAR},
      DORMITORY_ADDRESS = #{dormitoryAddress,jdbcType=VARCHAR},
      CREATE_TIME = #{createTime,jdbcType=VARCHAR}
    where USER_ID = #{userId,jdbcType=VARCHAR}
  </update>

  <!--关联角色-->
  <insert id="associateRoleByRoleId" parameterType="java.lang.String">
    insert into S_USER_USERROLES
     (USER_ROLE_ID, USER_ID, ROLE_ID)
     values (#{userRoleId, jdbcType=VARCHAR}, #{userId, jdbcType=VARCHAR}, #{roleId, jdbcType=VARCHAR})
  </insert>

  <!--取消关联角色-->
  <delete id="cancelAssociateRoleByUserId" parameterType="java.lang.String" >
    delete from S_USER_USERROLES
    where USER_ID = #{userId,jdbcType=VARCHAR}
  </delete>
</mapper>